import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './counterAPI';
import DataService from "../../services/Service";
import {FetchedPost} from "../../models/post";

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  items: FetchedPost[];
  file: FetchedPost;
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
  items: [],
  file: {name: '', content: ''},
};

export const getAllFiles = createAsyncThunk(
    "posts/allfiles",
    async () => {
      const res = await DataService.getAll();
      return res.data;
    }
);

export const getFile = createAsyncThunk(
    "posts/getfile",
    async (fileName: string) => {
        const res = await DataService.getFile(fileName);
        return res.data;
    }
);


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'posts/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
    builder
        .addCase(getAllFiles.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getAllFiles.fulfilled, (state, action) => {
          state.status = 'idle';
          state.items = action.payload.data;
        });
    builder
        .addCase(getFile.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getFile.fulfilled, (state, action) => {
            state.status = 'idle';
            state.file = action.payload;
        });
  },
});

//export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.posts.value)`
export const selectCount = (state: RootState) => state.counter.value;
export const selectItems = (state: RootState) => state.counter.items;
export const selectFile = (state: RootState) => state.counter.file;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default counterSlice.reducer;
